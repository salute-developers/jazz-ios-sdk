// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SDNavigation
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import DevicesCore
import DevicesDesignSystem
import DevicesUI
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public protocol AlertPresenter : AnyObject {
  func present(_ model: DevicesDesignSystem.Alert)
}
public struct ContextStackScreenAdapter<Content> : DevicesCore.StackScreen where Content : UIKit.UIViewController {
  public typealias MeasureHandler = (_ size: CoreFoundation.CGSize, _ safeAreaInsets: UIKit.UIEdgeInsets) -> CoreFoundation.CGSize
  public let content: Content
  public let measure: SDNavigation.ContextStackScreenAdapter<Content>.MeasureHandler
  @DevicesCore.MutableProperty @_projectedValueProperty($mutableFlags) public var mutableFlags: DevicesCore.StackScreenFlags {
    get
    nonmutating set
    nonmutating _modify
  }
  public var $mutableFlags: DevicesCore.MutableProperty<DevicesCore.StackScreenFlags> {
    get
  }
  public var flags: DevicesCore.Property<DevicesCore.StackScreenFlags> {
    get
  }
  @inlinable public var viewController: UIKit.UIViewController {
    get {
		content
	}
  }
  public init(makeSubject: (DevicesUI.ViewContext) -> Content, context: DevicesUI.ViewContext, flags: DevicesCore.MutableProperty<DevicesCore.StackScreenFlags> = MutableProperty(StackScreenFlags()), measure: @escaping SDNavigation.ContextStackScreenAdapter<Content>.MeasureHandler = { size, _ in size })
  public func setHeader(_ header: SDNavigation.ScreenHeader)
}
final public class DefaultAlertPresenter : SDNavigation.AlertPresenter {
  public init(stackScreenPresenter: DevicesCore.StackScreenPresenter, alertScreenFactory: DevicesDesignSystem.AlertScreenFactory)
  final public func present(_ model: DevicesDesignSystem.Alert)
  final public func dismissAlert()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) final public class HeaderBar : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var containerTopInset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public init(context: DevicesUI.ViewContext)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public func setItem(_ item: SDNavigation.ScreenHeader)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
final public class LegacyShareScreenPresenter : SDNavigation.ShareScreenPresenter {
  final public var isPresented: Swift.Bool {
    get
  }
  public init(modalScreenPresenter: DevicesDesignSystem.ModalScreenPresenter, shareScreenFactory: DevicesDesignSystem.ShareScreenFactory)
  final public func present(_ config: DevicesDesignSystem.ShareScreenConfig)
  final public func dismiss()
  @objc deinit
}
extension SDNavigation.ScreenHeader {
  public static func makeCloseButton(action: @escaping () -> Swift.Void) -> DevicesUI.ViewRenderable
  public static func makeBackButton(action: @escaping () -> Swift.Void) -> DevicesUI.ViewRenderable
  public static func makeTitle(text: DevicesUI.StringContent) -> DevicesUI.ViewRenderable
}
public struct ScreenHeader {
  public let left: DevicesUI.ViewRenderable?
  public let center: DevicesUI.ViewRenderable?
  public let right: DevicesUI.ViewRenderable?
  public let header: DevicesCore.MutableProperty<DevicesUI.ViewRenderable?>
  public init(left: DevicesUI.ViewRenderable? = nil, center: DevicesUI.ViewRenderable? = nil, right: DevicesUI.ViewRenderable? = nil, header: DevicesCore.MutableProperty<DevicesUI.ViewRenderable?> = .init(nil))
}
extension DevicesUI.ScrollListViewRenderable {
  public func updatingDynamicHeader() -> DevicesUI.ScrollListViewRenderable
}
public protocol ShareScreenPresenter {
  var isPresented: Swift.Bool { get }
  func present(_ config: DevicesDesignSystem.ShareScreenConfig)
  func dismiss()
}
public protocol StackControllerAnimator {
  var isRunning: Swift.Bool { get }
  func addAnimations(_ animation: @escaping () -> Swift.Void)
  func addCompletion(_ completion: @escaping (UIKit.UIViewAnimatingPosition) -> Swift.Void)
  func startAnimation()
}
extension UIKit.UIViewPropertyAnimator : SDNavigation.StackControllerAnimator {
}
public enum StackControllerAnimatorError : Swift.Error {
  case alreadyHasInteractiveAnimator
  case alreadyInAnimationState
  public static func == (a: SDNavigation.StackControllerAnimatorError, b: SDNavigation.StackControllerAnimatorError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol StackControllerChildAnimator : AnyObject {
  func cancelInteractiveAnimation()
}
public protocol StackControllerInteractiveAnimationFocus : AnyObject {
  func cancelInteractiveAnimationIfNeeded()
  func tryToStartInteractiveAnimation(animator: SDNavigation.StackControllerChildAnimator) throws
  func releaseInteractiveAnimation(animator: SDNavigation.StackControllerChildAnimator)
}
public typealias StackActionTrigger = DevicesCore.StackScreenInteractivity.ActionSource
final public class StackScreenController<Screen> : DevicesCore.Pausable where Screen : DevicesCore.StackScreen {
  final public let topScreen: DevicesCore.Property<Screen?>
  final public var modelScreens: DevicesCore.Property<[Screen]> {
    get
  }
  public init(container: UIKit.UIViewController, actionsQueue: DevicesCore.ActionQueue, animator: SDNavigation.StackControllerAnimator & SDNavigation.StackControllerInteractiveAnimationFocus, assertionCaller: DevicesCore.AssertionCaller)
  convenience public init(container: UIKit.UIViewController)
  final public func hasDisplayedScreen(withTag tag: DevicesCore.StackScreenTag) -> Swift.Bool
  final public func findScreen(byTag tag: DevicesCore.StackScreenTag) -> Screen?
  final public func resume()
  final public func pause()
  final public func prepend(_ screen: Screen, tag: DevicesCore.StackScreenTag, interactivity: DevicesCore.StackScreenInteractivity, trigger: SDNavigation.StackActionTrigger)
  final public func push(_ screen: Screen, tag: DevicesCore.StackScreenTag, interactivity: DevicesCore.StackScreenInteractivity, trigger: SDNavigation.StackActionTrigger)
  final public func pop(tag: DevicesCore.StackScreenTag, trigger: SDNavigation.StackActionTrigger)
  final public func remove(_ screen: Screen, trigger: DevicesCore.StackScreenInteractivity.ActionSource)
  final public func dropAll(withTag tag: DevicesCore.StackScreenTag)
  final public func bringToFront(tag: DevicesCore.StackScreenTag)
  @objc deinit
}
extension SDNavigation.StackScreenController : SDNavigation.StackScreenDropper {
  final public func dropAll()
}
public protocol StackScreenDropper {
  func dropAll()
}
final public class StackScreenDropperComposite : SDNavigation.StackScreenDropper {
  public init(stackControllers: [SDNavigation.StackScreenDropper])
  final public func dropAll()
  @objc deinit
}
extension DevicesCore.KeyValueContextKey where Tag == DevicesCore.StackScreenFlagsTag {
  public static var screenHeader: DevicesCore.StackScreenFlagsKey<SDNavigation.ScreenHeader?> {
    get
  }
}
@_hasMissingDesignatedInitializers final public class StackScreenInteractiveAnimator : SDNavigation.StackControllerChildAnimator {
  final public func cancelInteractiveAnimation()
  @objc deinit
}
extension SDNavigation.StackScreenInteractiveAnimator : DevicesDesignSystem.TransitionDriverDelegate {
  final public var percentComplete: CoreFoundation.CGFloat {
    get
  }
  final public func start()
  final public func cancel()
  final public func finish()
  final public func update(_ percent: CoreFoundation.CGFloat)
}
final public class StackScreenPresenterWrapper<Screen> : DevicesCore.StackScreenPresenter where Screen : DevicesCore.StackScreen {
  public init(stackController: SDNavigation.StackScreenController<Screen>, screenFactory: @escaping (DevicesCore.StackScreen) -> Screen)
  final public func prepend(_ screen: DevicesCore.StackScreen, tag: DevicesCore.StackScreenTag, interactivity: DevicesCore.StackScreenInteractivity, trigger: DevicesCore.StackScreenInteractivity.ActionSource)
  final public func push(_ screen: DevicesCore.StackScreen, tag: DevicesCore.StackScreenTag, interactivity: DevicesCore.StackScreenInteractivity, trigger: DevicesCore.StackScreenInteractivity.ActionSource)
  final public func pop(tag: DevicesCore.StackScreenTag, trigger: DevicesCore.StackScreenInteractivity.ActionSource)
  final public func dropAll(withTag: DevicesCore.StackScreenTag)
  final public func hasDisplayedScreen(withTag tag: DevicesCore.StackScreenTag) -> Swift.Bool
  @objc deinit
}
extension SDNavigation.StackControllerAnimatorError : Swift.Equatable {}
extension SDNavigation.StackControllerAnimatorError : Swift.Hashable {}
