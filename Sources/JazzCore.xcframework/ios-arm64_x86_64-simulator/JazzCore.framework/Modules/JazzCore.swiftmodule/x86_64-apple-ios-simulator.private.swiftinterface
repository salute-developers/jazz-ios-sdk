// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JazzCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import CallKit
import Foundation
@_exported import JazzCore
import Swift
import _Concurrency
import _StringProcessing
public protocol CXProviderProtocol : AnyObject {
  var configuration: CallKit.CXProviderConfiguration { get set }
  func setDelegate(_ delegate: CallKit.CXProviderDelegate?, queue: Dispatch.DispatchQueue?)
  func reportNewIncomingCall(with UUID: Foundation.UUID, update: CallKit.CXCallUpdate, completion: @escaping (Swift.Error?) -> Swift.Void)
  func reportCall(with UUID: Foundation.UUID, updated update: CallKit.CXCallUpdate)
  func reportCall(with UUID: Foundation.UUID, endedAt dateEnded: Foundation.Date?, reason endedReason: CallKit.CXCallEndedReason)
  func reportOutgoingCall(with UUID: Foundation.UUID, startedConnectingAt dateStartedConnecting: Foundation.Date?)
  func reportOutgoingCall(with UUID: Foundation.UUID, connectedAt dateConnected: Foundation.Date?)
  func invalidate()
}
public protocol CXCallControllerProtocol : AnyObject {
  var calls: [CallKit.CXCall] { get }
  func request(_ transaction: CallKit.CXTransaction, completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension CallKit.CXProvider : JazzCore.CXProviderProtocol {
}
extension CallKit.CXCallController : JazzCore.CXCallControllerProtocol {
  public var calls: [CallKit.CXCall] {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class JMCallKitProxy : ObjectiveC.NSObject {
  public static var callKitProvider: JazzCore.CXProviderProtocol?
  public static var callKitCallController: JazzCore.CXCallControllerProtocol?
  @objc public static var enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static func configureProvider(localizedName: Swift.String, ringtoneSound: Swift.String?, iconTemplateImageData: Foundation.Data?)
  @objc public static func isProviderConfigured() -> Swift.Bool
  @objc public static func addListener(_ listener: JazzCore.JMCallKitListener)
  @objc public static func removeListener(_ listener: JazzCore.JMCallKitListener)
  @objc public static func hasActiveCallForUUID(_ callUUID: Swift.String) -> Swift.Bool
  @objc public static func reportNewIncomingCall(UUID: Foundation.UUID, handle: Swift.String?, displayName: Swift.String?, hasVideo: Swift.Bool, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func reportCallUpdate(with UUID: Foundation.UUID, handle: Swift.String?, displayName: Swift.String?, hasVideo: Swift.Bool)
  @objc public static func reportCall(with UUID: Foundation.UUID, endedAt dateEnded: Foundation.Date?, reason endedReason: CallKit.CXCallEndedReason)
  @objc public static func reportOutgoingCall(with UUID: Foundation.UUID, startedConnectingAt dateStartedConnecting: Foundation.Date?)
  @objc public static func reportOutgoingCall(with UUID: Foundation.UUID, connectedAt dateConnected: Foundation.Date?)
  @objc public static func request(_ transaction: CallKit.CXTransaction, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc deinit
}
@objc public protocol JMCallKitListener : ObjectiveC.NSObjectProtocol {
  @objc optional func providerDidReset()
  @objc optional func performAnswerCall(UUID: Foundation.UUID)
  @objc optional func performEndCall(UUID: Foundation.UUID)
  @objc optional func performSetMutedCall(UUID: Foundation.UUID, isMuted: Swift.Bool)
  @objc optional func performStartCall(UUID: Foundation.UUID, isVideo: Swift.Bool)
  @objc optional func providerDidActivateAudioSession(session: AVFAudio.AVAudioSession)
  @objc optional func providerDidDeactivateAudioSession(session: AVFAudio.AVAudioSession)
  @objc optional func providerTimedOutPerformingAction(action: CallKit.CXAction)
}
