// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name LibSberCast
import Foundation
@_exported import LibSberCast
import Swift
import _Concurrency
public enum CastRequestResponseCode : Swift.Int {
  case success
  case badRequest
  case unknownDevice
  case deviceNotConnected
  case notAllowed
  case error
  case unhandled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GamepadSessionConnectionInfoCastResponseStatus {
  case success
  case timeout
  case noGamepad
  case error
  public static func == (a: LibSberCast.GamepadSessionConnectionInfoCastResponseStatus, b: LibSberCast.GamepadSessionConnectionInfoCastResponseStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConnectWifiCastResponseStatus : Swift.Int {
  case success
  case wrongPassword
  case timeout
  case networkNotAvailable
  case wifiNotFound
  case unknownError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CastRequestResponse {
  public let id: Swift.String
  public let code: LibSberCast.CastRequestResponseCode
  public let type: LibSberCast.CastRequestResponseType
  public init(id: Swift.String, code: LibSberCast.CastRequestResponseCode, type: LibSberCast.CastRequestResponseType)
}
public enum PinConnectConfirmationCastResponseStatus {
  case error
  case authorized
  case wrongPin
  case attemptsLimitReached
  case badSessionIdentifiers
  case disabled
  public static func == (a: LibSberCast.PinConnectConfirmationCastResponseStatus, b: LibSberCast.PinConnectConfirmationCastResponseStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PinConnectCastResponseStatus {
  case error
  case inputPinCode
  case authorized
  case sessionAlreadyActive
  case tooManyRequests
  case disabled
  public static func == (a: LibSberCast.PinConnectCastResponseStatus, b: LibSberCast.PinConnectCastResponseStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CastRequestResponseType {
  case castResponseBase
  case undefinedCastResponse(deviceId: Swift.String)
  case getWifiListCastResponse(deviceId: Swift.String, wifiList: [Swift.String])
  case connectWifiCastResponse(deviceId: Swift.String, status: LibSberCast.ConnectWifiCastResponseStatus)
  case pongCastResponse(deviceId: Swift.String, gotPong: Swift.Bool)
  case pinConnectCastResponse(deviceId: Swift.String, status: LibSberCast.PinConnectCastResponseStatus)
  case cancelPinConnectCastResponse(deviceId: Swift.String)
  case pinConnectConfirmationCastResponse(deviceId: Swift.String, status: LibSberCast.PinConnectConfirmationCastResponseStatus, pinAccessToken: Swift.String)
  case gamepadSessionConnectionInfoCastResponse(deviceId: Swift.String, status: LibSberCast.GamepadSessionConnectionInfoCastResponseStatus, sessionId: Swift.String, port: Swift.UInt, serviceVersion: Swift.String, aesKey: Swift.String, ipV4List: Swift.Set<Swift.String>)
  case getStateCastResponse(deviceId: Swift.String, state: [Swift.String : Any]?)
}
public struct SberCastDevice : Swift.CustomDebugStringConvertible {
  public struct Features : Swift.OptionSet, Swift.Hashable, Swift.CustomDebugStringConvertible {
    public let rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let browser: LibSberCast.SberCastDevice.Features
    public static let youtube: LibSberCast.SberCastDevice.Features
    public static let jazz: LibSberCast.SberCastDevice.Features
    public static let screen: LibSberCast.SberCastDevice.Features
    public static let gamepadService: LibSberCast.SberCastDevice.Features
    public var debugDescription: Swift.String {
      get
    }
    public typealias ArrayLiteralElement = LibSberCast.SberCastDevice.Features
    public typealias Element = LibSberCast.SberCastDevice.Features
    public typealias RawValue = Swift.UInt
  }
  public let id: Swift.String
  public let discoveredDeviceKey: Swift.String
  public let name: Swift.String
  public let type: Swift.String
  public let starosDeviceId: Swift.String
  public let isKnownToBackend: Swift.Bool
  public let isDiscovered: Swift.Bool
  public let isConnected: Swift.Bool
  public let features: LibSberCast.SberCastDevice.Features?
  public let version: Swift.String?
  public let metadata: LibSberCast.DeviceMetadata?
  public init(discoveredDeviceKey: Swift.String, id: Swift.String, name: Swift.String, type: Swift.String, starosDeviceId: Swift.String, isKnownToBackend: Swift.Bool, isDiscovered: Swift.Bool, isConnected: Swift.Bool, features: LibSberCast.SberCastDevice.Features? = nil, version: Swift.String? = nil, metadata: LibSberCast.DeviceMetadata? = nil)
  public func has(feature: LibSberCast.SberCastDevice.Features) -> Swift.Bool?
  public var debugDescription: Swift.String {
    get
  }
}
@available(*, deprecated, message: "use `SberCastDevice` instead")
public typealias CastDevice = LibSberCast.SberCastDevice
public enum ErrorCode : Swift.Error {
  case sberIdAuthError
  case discoveryError
  case backendNetworkError
  case unknownError
  case bleError
  public static func == (a: LibSberCast.ErrorCode, b: LibSberCast.ErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CastError {
  public let code: LibSberCast.ErrorCode
  public let msg: Swift.String
  public init(code: LibSberCast.ErrorCode, msg: Swift.String)
}
public struct CastStatus : Swift.CustomDebugStringConvertible {
  public let state: LibSberCast.CastStatusState
  public let startError: LibSberCast.CastStatusStartError
  public init(state: LibSberCast.CastStatusState, startError: LibSberCast.CastStatusStartError)
  public var debugDescription: Swift.String {
    get
  }
}
public enum CastMessageCode : Swift.Int {
  case success
  case unknownDevice
  case deviceNotConnected
  case sendDirectiveError
  case parseError
  case error
  case tokenError
  case unhandled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CastMessage {
  public let id: Swift.String
  public let code: LibSberCast.CastMessageCode
  public let description: Swift.String
  public init(id: Swift.String, code: LibSberCast.CastMessageCode, description: Swift.String)
}
public struct DeviceSetupStepDeviceUpdating : Swift.Equatable {
  public let percent: Swift.Int
  public static func == (a: LibSberCast.DeviceSetupStepDeviceUpdating, b: LibSberCast.DeviceSetupStepDeviceUpdating) -> Swift.Bool
}
public enum CastStatusState : Swift.Int {
  case stopped
  case starting
  case running
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CastDirectiveSystem {
  case system
  case smartApp
  public static func == (a: LibSberCast.CastDirectiveSystem, b: LibSberCast.CastDirectiveSystem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CastDirectiveType : Swift.Equatable {
  case showYouTubeAppDirective
  case showYouTubeByIdDirective(youTubeVideoId: Swift.String)
  case showYouTubeSearchDirective(textToSearch: Swift.String)
  case openDeeplink(Swift.String)
  case castSmartAppDataDirective(smartAppInfo: LibSberCast.CastSmartAppInfo, payload: Swift.String)
  case castRunSmartAppDirective(smartAppInfo: LibSberCast.CastSmartAppInfo, sourceSmartAppInfo: LibSberCast.CastSmartAppInfo)
  public static func == (a: LibSberCast.CastDirectiveType, b: LibSberCast.CastDirectiveType) -> Swift.Bool
}
public typealias CastDirectiveId = Swift.String
public typealias CastRequestId = Swift.String
public struct CastDirective {
  public let type: LibSberCast.CastDirectiveType
  public init(_ type: LibSberCast.CastDirectiveType)
}
public enum CastRequestType {
  case castRequestBase
  case getWifiListCastRequest
  case connectWifiCastRequest(ssid: Swift.String, password: Swift.String)
  case pingCastRequest
  case getGamepadSessionCastRequest(sessionId: Swift.String)
  case getSmartAppStateRequest(castSmartAppInfo: LibSberCast.CastSmartAppInfo)
  case getStateRequest
}
public enum CastStatusStartError : Swift.Int {
  case no
  case clientNameEmpty
  case noDiscovery
  case discoveryStart
  case backend
  case connection
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CastRequest {
  public let type: LibSberCast.CastRequestType
  public init(type: LibSberCast.CastRequestType)
}
public protocol SberCastListener : AnyObject {
  func onStatusChanged(status: LibSberCast.CastStatus)
  func onError(error: LibSberCast.CastError)
  func onDevicesChanged(_ devices: [LibSberCast.SberCastDevice])
  func onCastMessageResponse(message: LibSberCast.CastMessage)
  func onCastRequestResponse(response: LibSberCast.CastRequestResponse)
  func onBLEDeeplinkReceived(deeplink: Swift.String)
  func onBLEDeeplinkRunInfo(_ info: LibSberCast.RunBLEDeeplinkOnDeviceInfo)
}
public enum DeviceSetupChannelType : Swift.CaseIterable {
  case ble
  case wifi
  public static func == (a: LibSberCast.DeviceSetupChannelType, b: LibSberCast.DeviceSetupChannelType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [LibSberCast.DeviceSetupChannelType]
  public static var allCases: [LibSberCast.DeviceSetupChannelType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SberCast : AnyObject {
  func addListener(listener: LibSberCast.SberCastListener)
  func removeListener(listener: LibSberCast.SberCastListener)
  func sendDirective(deviceId: Swift.String, directive: LibSberCast.CastDirective) -> LibSberCast.CastDirectiveId?
  func sendRequest(deviceId: Swift.String, request: LibSberCast.CastRequest) -> LibSberCast.CastRequestId?
  func start()
  func setEsaToken(esaToken: Swift.String)
  func setBackendBaseUrl(url: Swift.String)
  func setClientName(name: Swift.String)
  func setAnalytics(analyticsListener: LibSberCast.AnalyticsListener)
  func stop()
  func pause()
  func refresh()
  func deviceSetup() -> LibSberCast.DeviceSetup
  func enableBLE(newBLEState: Swift.Bool)
  func setLogWrapper(logWriter: LibSberCast.SberCastLogWriter)
  func connectToDevice(deviceId: Swift.String, accessToken: Swift.String) -> LibSberCast.CastRequestId?
  func confirmDeviceConnectionCode(deviceId: Swift.String, code: Swift.String) -> LibSberCast.CastRequestId?
  func cancelDeviceConnectionRequest(deviceId: Swift.String) -> LibSberCast.CastRequestId?
  func accessTokenForDevice(_ deviceId: Swift.String) -> Swift.String
  func setAccessTokenForDevice(_ deviceId: Swift.String, accessToken: Swift.String)
  func ipv4ListOfDevice(_ deviceId: Swift.String) -> Swift.Set<Swift.String>
  func ipv6ListOfDevice(_ deviceId: Swift.String) -> Swift.Set<Swift.String>
  func setBLEDeeplinkToRunOnDeviceWhenTouched(_ deeplink: Foundation.URL?)
  var voiceTransport: LibSberCast.VoiceTransport { get }
  var isPaused: Swift.Bool { get }
  var isRunning: Swift.Bool { get }
  var devices: [LibSberCast.SberCastDevice] { get }
}
extension LibSberCast.SberCast {
  @available(*, deprecated, message: "use `if (isPaused) {start()}` instead")
  public func unpause()
}
public enum DeviceSetupWifiType : Swift.CaseIterable {
  case open
  case wep
  case wpa
  public static func == (a: LibSberCast.DeviceSetupWifiType, b: LibSberCast.DeviceSetupWifiType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [LibSberCast.DeviceSetupWifiType]
  public static var allCases: [LibSberCast.DeviceSetupWifiType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeviceSetupWifiInfo : Swift.Equatable {
  public let ssid: Swift.String
  public let type: LibSberCast.DeviceSetupWifiType
  public init(ssid: Swift.String, type: LibSberCast.DeviceSetupWifiType)
  public static func == (a: LibSberCast.DeviceSetupWifiInfo, b: LibSberCast.DeviceSetupWifiInfo) -> Swift.Bool
}
public enum DeviceSetupState {
  case idle
  case starting
  case discovering
  case connected
  case configured
  case configuredAsGuest
  public static func == (a: LibSberCast.DeviceSetupState, b: LibSberCast.DeviceSetupState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeviceInfo {
  public let version: Swift.String
  public let product: Swift.String
  public let displayName: Swift.String
  public let vendor: Swift.String
  public init(version: Swift.String, product: Swift.String, displayName: Swift.String, vendor: Swift.String)
}
public enum DeviceSetupESAStatus : Swift.Equatable {
  case userCodeNotReady
  case userCodeReady(userCode: Swift.String)
  case authorized
  case error
  public static func == (a: LibSberCast.DeviceSetupESAStatus, b: LibSberCast.DeviceSetupESAStatus) -> Swift.Bool
}
public enum DeviceSetupStep : Swift.Equatable {
  case deviceConnected(LibSberCast.DeviceSetupDeviceInfo)
  case networkList(ethernetInfo: LibSberCast.DeviceSetupEthernetInfo, wifiInfoList: [LibSberCast.DeviceSetupWifiInfo], deviceInfo: LibSberCast.DeviceSetupDeviceInfo)
  case connectingToNetwork(LibSberCast.DeviceSetupConnectingToNetworkStatus, deviceInfo: LibSberCast.DeviceSetupDeviceInfo)
  case esaStatus(LibSberCast.DeviceSetupESAStatus, deviceInfo: LibSberCast.DeviceSetupDeviceInfo)
  case deviceConfigured(LibSberCast.DeviceSetupDeviceInfo)
  case deviceUpdating(percent: Swift.Int, deviceInfo: LibSberCast.DeviceSetupDeviceInfo)
  case deviceUpdated(LibSberCast.DeviceSetupDeviceInfo)
  case requestForEsa(LibSberCast.DeviceSetupDeviceInfo)
  public static func == (a: LibSberCast.DeviceSetupStep, b: LibSberCast.DeviceSetupStep) -> Swift.Bool
}
public enum DeviceSetupConnectingToNetworkStatus : Swift.Equatable {
  case notConfigured
  case connecting
  case connected
  case error
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: LibSberCast.DeviceSetupConnectingToNetworkStatus, b: LibSberCast.DeviceSetupConnectingToNetworkStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum VoiceTransportAudioType : Swift.Int {
  case unknown
  case pcm16khz16bit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol VoiceTransportListener : AnyObject {
  func onStartVoiceInputResponse(deviceId: Swift.String, status: LibSberCast.VoiceTransportConversationStatus)
  func onSendAudioDataResponse(deviceId: Swift.String, status: LibSberCast.VoiceTransportConversationStatus)
  func onCancelVoiceInputResponse(deviceId: Swift.String, status: LibSberCast.VoiceTransportConversationStatus)
}
public struct DeviceMetadata {
  public let deviceInfo: LibSberCast.DeviceInfo
  public let smartAppsInfos: [LibSberCast.CastSmartAppInfo]
  public let extraMeta: [Swift.String : Swift.String]
  public let hasGamepad: Swift.Bool
  public init(deviceInfo: LibSberCast.DeviceInfo, smartAppsInfos: [LibSberCast.CastSmartAppInfo], extraMeta: [Swift.String : Swift.String], hasGamepad: Swift.Bool)
}
public enum VoiceTransportConversationStatus : Swift.Int {
  case unknown
  case notStarted
  case listening
  case listeningComplete
  case ended
  case cancelled
  case error
  case deviceNotConnected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VoiceTransportRequestType : Swift.Int {
  case unknown
  case startVoiceInput
  case sendVoiceData
  case cancelVoiceInput
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol VoiceTransport : AnyObject {
  func resetListener(listener: LibSberCast.VoiceTransportListener) -> Swift.Bool
  func startVoiceInput(deviceId: Swift.String)
  func sendAudioData(deviceId: Swift.String, audioType: LibSberCast.VoiceTransportAudioType, audioData: Foundation.Data)
  func cancelVoiceInput(deviceId: Swift.String)
}
public enum RunBLEDeeplinkOnDeviceStatus : Swift.Int {
  case error
  case bleDisabledInSbercast
  case bleErrorInSbercast
  case unsupportedDevice
  case cancelled
  case waitingBleToBeStarted
  case searchingDevice
  case waitingAnswerFromDevice
  case success
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct RunBLEDeeplinkOnDeviceInfo : Swift.CustomDebugStringConvertible {
  public let status: LibSberCast.RunBLEDeeplinkOnDeviceStatus
  public let deeplink: Foundation.URL?
  public let deeplinkToRunIsSet: Swift.Bool
  public init(status: LibSberCast.RunBLEDeeplinkOnDeviceStatus, deeplink: Foundation.URL?, deeplinkToRunIsSet: Swift.Bool)
  public var debugDescription: Swift.String {
    get
  }
}
@available(*, deprecated, message: "use `RunBLEDeeplinkOnDeviceInfo` instead")
public typealias RunBLEDeeplinkOnDeviceResult = LibSberCast.RunBLEDeeplinkOnDeviceInfo
public enum CastLogSeverity : Swift.Int, Swift.Comparable, Swift.CaseIterable, Swift.CustomStringConvertible {
  case nothing
  case fatal
  case error
  case warning
  case info
  case debug
  case verbose
  public static func < (lhs: LibSberCast.CastLogSeverity, rhs: LibSberCast.CastLogSeverity) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [LibSberCast.CastLogSeverity]
  public typealias RawValue = Swift.Int
  public static var allCases: [LibSberCast.CastLogSeverity] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct CastLogRecord {
  public let level: LibSberCast.CastLogSeverity
  public let timestamp: Swift.UInt
  public let milliseconds: Swift.UInt
  public let functionName: Swift.String
  public let line: Swift.UInt
  public let fileName: Swift.String
  public let threadId: Swift.UInt
  public let message: Swift.String
}
public protocol SberCastLogWriter : AnyObject {
  func checkSeverity(level: LibSberCast.CastLogSeverity) -> Swift.Bool
  func write(withRecord record: LibSberCast.CastLogRecord)
}
public enum SberCastFactory {
  public static func makeSberCast(clientName: Swift.String) -> LibSberCast.SberCast
}
public protocol DeviceSetup : AnyObject {
  func start(channelType: LibSberCast.DeviceSetupChannelType)
  func stop()
  func setListener(listener: LibSberCast.DeviceSetupListener?)
  func getNetworks()
  func connectWifi(ssid: Swift.String, password: Swift.String, type: LibSberCast.DeviceSetupWifiType, isHidden: Swift.Bool)
  func connectEthernet()
  func startReconfiguringDevice(_ remoteDevice: LibSberCast.DeviceSetupRemoteDevice)
  func setLogWrapper(logWriter: LibSberCast.SberCastLogWriter)
  func setAnalytics(analyticsListener: LibSberCast.AnalyticsListener)
}
public enum DeviceSetupEthernetStatus : Swift.Equatable {
  case available(connected: Swift.Bool)
  case unavailable
  public init(available: Swift.Bool, connected: Swift.Bool)
  public static func == (a: LibSberCast.DeviceSetupEthernetStatus, b: LibSberCast.DeviceSetupEthernetStatus) -> Swift.Bool
}
public protocol DeviceSetupListener : AnyObject {
  func onStateChanged(_ state: LibSberCast.DeviceSetupState)
  func onError(_ error: Swift.Error)
  func onCurrentDeviceSetupStep(_ deviceSetupStep: LibSberCast.DeviceSetupStep)
}
public protocol AnalyticsListener : AnyObject {
  func fireEvent(eventName: Swift.String, values: [Swift.String : Swift.String])
}
public struct CastSmartAppInfo : Swift.Equatable {
  public let projectId: Swift.String
  public let applicationId: Swift.String
  public let appVersionId: Swift.String
  public let frontendEndpoint: Swift.String
  public let frontendType: Swift.String
  public let systemName: Swift.String
  public init(projectId: Swift.String, applicationId: Swift.String, appVersionId: Swift.String, frontendEndpoint: Swift.String, frontendType: Swift.String, systemName: Swift.String)
  public static func == (a: LibSberCast.CastSmartAppInfo, b: LibSberCast.CastSmartAppInfo) -> Swift.Bool
}
public struct DeviceSetupDeviceInfo : Swift.Equatable {
  public let id: Swift.String
  public let serialNumber: Swift.String
  public let product: Swift.String
  public init(id: Swift.String, serialNumber: Swift.String, product: Swift.String)
  public static func == (a: LibSberCast.DeviceSetupDeviceInfo, b: LibSberCast.DeviceSetupDeviceInfo) -> Swift.Bool
}
public struct DeviceSetupEthernetInfo : Swift.Equatable {
  public let status: LibSberCast.DeviceSetupEthernetStatus
  public init(status: LibSberCast.DeviceSetupEthernetStatus)
  public static func == (a: LibSberCast.DeviceSetupEthernetInfo, b: LibSberCast.DeviceSetupEthernetInfo) -> Swift.Bool
}
public struct DeviceSetupRemoteDevice : Swift.Equatable {
  public let id: Swift.String
  public let product: Swift.String
  public init(id: Swift.String, product: Swift.String)
  public static func == (a: LibSberCast.DeviceSetupRemoteDevice, b: LibSberCast.DeviceSetupRemoteDevice) -> Swift.Bool
}
extension LibSberCast.CastRequestResponseCode : Swift.Equatable {}
extension LibSberCast.CastRequestResponseCode : Swift.Hashable {}
extension LibSberCast.CastRequestResponseCode : Swift.RawRepresentable {}
extension LibSberCast.GamepadSessionConnectionInfoCastResponseStatus : Swift.Equatable {}
extension LibSberCast.GamepadSessionConnectionInfoCastResponseStatus : Swift.Hashable {}
extension LibSberCast.ConnectWifiCastResponseStatus : Swift.Equatable {}
extension LibSberCast.ConnectWifiCastResponseStatus : Swift.Hashable {}
extension LibSberCast.ConnectWifiCastResponseStatus : Swift.RawRepresentable {}
extension LibSberCast.PinConnectConfirmationCastResponseStatus : Swift.Equatable {}
extension LibSberCast.PinConnectConfirmationCastResponseStatus : Swift.Hashable {}
extension LibSberCast.PinConnectCastResponseStatus : Swift.Equatable {}
extension LibSberCast.PinConnectCastResponseStatus : Swift.Hashable {}
extension LibSberCast.ErrorCode : Swift.Equatable {}
extension LibSberCast.ErrorCode : Swift.Hashable {}
extension LibSberCast.CastMessageCode : Swift.Equatable {}
extension LibSberCast.CastMessageCode : Swift.Hashable {}
extension LibSberCast.CastMessageCode : Swift.RawRepresentable {}
extension LibSberCast.CastStatusState : Swift.Equatable {}
extension LibSberCast.CastStatusState : Swift.Hashable {}
extension LibSberCast.CastStatusState : Swift.RawRepresentable {}
extension LibSberCast.CastDirectiveSystem : Swift.Equatable {}
extension LibSberCast.CastDirectiveSystem : Swift.Hashable {}
extension LibSberCast.CastStatusStartError : Swift.Equatable {}
extension LibSberCast.CastStatusStartError : Swift.Hashable {}
extension LibSberCast.CastStatusStartError : Swift.RawRepresentable {}
extension LibSberCast.DeviceSetupChannelType : Swift.Equatable {}
extension LibSberCast.DeviceSetupChannelType : Swift.Hashable {}
extension LibSberCast.DeviceSetupWifiType : Swift.Equatable {}
extension LibSberCast.DeviceSetupWifiType : Swift.Hashable {}
extension LibSberCast.DeviceSetupState : Swift.Equatable {}
extension LibSberCast.DeviceSetupState : Swift.Hashable {}
extension LibSberCast.DeviceSetupConnectingToNetworkStatus : Swift.Hashable {}
extension LibSberCast.VoiceTransportAudioType : Swift.Equatable {}
extension LibSberCast.VoiceTransportAudioType : Swift.Hashable {}
extension LibSberCast.VoiceTransportAudioType : Swift.RawRepresentable {}
extension LibSberCast.VoiceTransportConversationStatus : Swift.Equatable {}
extension LibSberCast.VoiceTransportConversationStatus : Swift.Hashable {}
extension LibSberCast.VoiceTransportConversationStatus : Swift.RawRepresentable {}
extension LibSberCast.VoiceTransportRequestType : Swift.Equatable {}
extension LibSberCast.VoiceTransportRequestType : Swift.Hashable {}
extension LibSberCast.VoiceTransportRequestType : Swift.RawRepresentable {}
extension LibSberCast.RunBLEDeeplinkOnDeviceStatus : Swift.Equatable {}
extension LibSberCast.RunBLEDeeplinkOnDeviceStatus : Swift.Hashable {}
extension LibSberCast.RunBLEDeeplinkOnDeviceStatus : Swift.RawRepresentable {}
extension LibSberCast.CastLogSeverity : Swift.Hashable {}
extension LibSberCast.CastLogSeverity : Swift.RawRepresentable {}
